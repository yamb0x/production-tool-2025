name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Job 1: Install dependencies and cache
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache-dir: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.turbo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  # Job 2: Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.turbo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run ESLint
        run: pnpm lint

      - name: Check formatting with Prettier
        run: pnpm format:check

      - name: Check for unused dependencies
        run: pnpm deps:check

  # Job 3: Type checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.turbo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run TypeScript compiler
        run: pnpm type-check

  # Job 4: Unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: production_tool_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.turbo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/production_tool_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/production_tool_test

      - name: Run unit tests
        run: pnpm test:unit --coverage

      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/production_tool_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 5: E2E tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: production_tool_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.turbo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/production_tool_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.test
          echo "NEXT_PUBLIC_API_URL=http://localhost:8000" >> .env.test

      - name: Build applications
        run: pnpm build

      - name: Run database migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/production_tool_test

      - name: Seed test data
        run: pnpm db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/production_tool_test

      - name: Start applications
        run: |
          pnpm start:api &
          pnpm start:web &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/production_tool_test
          REDIS_URL: redis://localhost:6379

      - name: Run E2E tests
        run: pnpm test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 6: Build check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.turbo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Build all packages
        run: pnpm build

      - name: Check build artifacts
        run: |
          ls -la apps/web/.next
          ls -la apps/api/dist

  # Job 7: Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.turbo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run security audit
        run: pnpm audit

      - name: Run dependency vulnerability check
        run: pnpm deps:check-vulnerabilities

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 8: Summary
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, e2e, build, security]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Lint failed"
            exit 1
          fi
          if [[ "${{ needs.typecheck.result }}" != "success" ]]; then
            echo "❌ Type check failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [[ "${{ needs.e2e.result }}" != "success" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"

      - name: Report success
        if: success()
        run: |
          echo "🎉 CI Pipeline completed successfully!"
          echo "✅ All quality gates passed"
          echo "📊 Coverage reports uploaded"
          echo "🔒 Security scans completed"