name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Job 1: Check for dependency updates
  check-updates:
    name: Check Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      update-summary: ${{ steps.check.outputs.summary }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated packages
        id: check
        run: |
          # Check for outdated packages
          OUTDATED=$(pnpm outdated --recursive --format=json || echo "[]")
          
          if [[ "$OUTDATED" == "[]" ]] || [[ -z "$OUTDATED" ]]; then
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "summary=No dependency updates available" >> $GITHUB_OUTPUT
          else
            echo "has-updates=true" >> $GITHUB_OUTPUT
            COUNT=$(echo "$OUTDATED" | jq length)
            echo "summary=$COUNT packages have updates available" >> $GITHUB_OUTPUT
            echo "Outdated packages:" >> outdated.json
            echo "$OUTDATED" >> outdated.json
          fi

      - name: Upload outdated packages info
        if: steps.check.outputs.has-updates == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: outdated-packages
          path: outdated.json

  # Job 2: Create update PR for patch and minor updates
  auto-update:
    name: Auto Update Dependencies
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has-updates == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create update branch
        run: |
          BRANCH_NAME="deps/automated-updates-$(date +%Y%m%d)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Install current dependencies
        run: pnpm install --frozen-lockfile

      - name: Update patch and minor versions
        run: |
          # Update patch versions (safe updates)
          pnpm update --recursive --latest --filter='*' --save-exact=false
          
          # Update dev dependencies to latest
          pnpm update --recursive --latest --save-dev

      - name: Run tests after updates
        run: |
          pnpm lint
          pnpm type-check
          pnpm test:unit
        continue-on-error: false

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          git add .
          git commit -m "chore: update dependencies to latest patch/minor versions
          
          - Updated all packages to latest compatible versions
          - All tests passing after updates
          - Automated dependency update by GitHub Actions"
          
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        if: steps.changes.outputs.has-changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "chore: automated dependency updates"
          body: |
            ## ðŸ¤– Automated Dependency Updates
            
            This PR was automatically created to update dependencies to their latest compatible versions.
            
            ### Changes
            - âœ… Updated patch and minor versions for all packages
            - âœ… Updated development dependencies to latest
            - âœ… All tests passing after updates
            
            ### Validation
            - [x] Linting passed
            - [x] Type checking passed  
            - [x] Unit tests passed
            
            ### Security
            This update includes security patches and bug fixes from the latest package versions.
            
            ### Review Notes
            - This PR only includes patch and minor version updates
            - Major version updates require manual review
            - All changes have been automatically tested
            
            ---
            
            **Summary:** ${{ needs.check-updates.outputs.update-summary }}
            
            Generated by GitHub Actions on $(date)
          labels: |
            dependencies
            automated
            chore
          reviewers: |
            # Add your team members here
          draft: false

  # Job 3: Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          # Run npm audit for security vulnerabilities
          pnpm audit --audit-level moderate
          
          # Check for known security issues
          npx audit-ci --moderate

      - name: Generate security report
        run: |
          pnpm audit --json > security-audit.json || true
          
          # Create human-readable summary
          echo "# Security Audit Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          # Count vulnerabilities
          HIGH=$(cat security-audit.json | jq -r '.metadata.vulnerabilities.high // 0')
          MODERATE=$(cat security-audit.json | jq -r '.metadata.vulnerabilities.moderate // 0')
          LOW=$(cat security-audit.json | jq -r '.metadata.vulnerabilities.low // 0')
          
          echo "## Summary" >> security-report.md
          echo "- High: $HIGH" >> security-report.md
          echo "- Moderate: $MODERATE" >> security-report.md
          echo "- Low: $LOW" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: |
            security-audit.json
            security-report.md

      - name: Create security issue
        if: contains(fromJson(github.event.head_commit.message), 'security') == false
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "ðŸ”’ Weekly Security Audit Report"
          content-filepath: security-report.md
          labels: |
            security
            audit
            automated

  # Job 4: Check for major updates (manual review required)
  major-updates:
    name: Check Major Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for major updates
        run: |
          # Get packages with major updates available
          pnpm outdated --recursive --format=json > all-outdated.json || echo "[]" > all-outdated.json
          
          # Filter for major updates
          cat all-outdated.json | jq '[.[] | select(.current != .latest and (.latest | split(".")[0] | tonumber) > (.current | split(".")[0] | tonumber))]' > major-updates.json
          
          MAJOR_COUNT=$(cat major-updates.json | jq length)
          
          if [[ "$MAJOR_COUNT" -gt 0 ]]; then
            echo "Found $MAJOR_COUNT packages with major updates:"
            cat major-updates.json | jq -r '.[] | "- \(.name): \(.current) â†’ \(.latest)"'
            
            # Create issue for manual review
            echo "# ðŸš€ Major Dependency Updates Available" > major-updates-issue.md
            echo "" >> major-updates-issue.md
            echo "The following packages have major version updates available that require manual review:" >> major-updates-issue.md
            echo "" >> major-updates-issue.md
            cat major-updates.json | jq -r '.[] | "- **\(.name)**: `\(.current)` â†’ `\(.latest)`"' >> major-updates-issue.md
            echo "" >> major-updates-issue.md
            echo "## Action Required" >> major-updates-issue.md
            echo "Please review the changelog for each package and update manually if appropriate." >> major-updates-issue.md
            echo "" >> major-updates-issue.md
            echo "## Breaking Changes" >> major-updates-issue.md
            echo "Major version updates may contain breaking changes. Please:" >> major-updates-issue.md
            echo "1. Review the changelog for each package" >> major-updates-issue.md
            echo "2. Test updates in a separate branch" >> major-updates-issue.md
            echo "3. Update code if necessary" >> major-updates-issue.md
            echo "4. Run full test suite" >> major-updates-issue.md
          else
            echo "No major updates available"
            echo "# No Major Updates" > major-updates-issue.md
            echo "All packages are up to date with no major version updates available." >> major-updates-issue.md
          fi

      - name: Upload major updates info
        uses: actions/upload-artifact@v4
        with:
          name: major-updates
          path: |
            major-updates.json
            major-updates-issue.md

      - name: Create major updates issue
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "ðŸš€ Major Dependency Updates Review Required"
          content-filepath: major-updates-issue.md
          labels: |
            dependencies
            major-update
            manual-review